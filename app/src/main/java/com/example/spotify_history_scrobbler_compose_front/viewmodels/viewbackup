package com.example.spotify_history_scrobbler_compose_front.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.spotify_history_scrobbler_compose_front.data.models.Ranking
import com.example.spotify_history_scrobbler_compose_front.network.MusicBrainzRetrofitClient
import com.example.spotify_history_scrobbler_compose_front.network.RetrofitClient
import com.example.spotify_history_scrobbler_compose_front.network.CoverArtArchiveRetrofitClient
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import android.util.Log

class MainViewModel : ViewModel() {

    private val api = RetrofitClient.api
    private val musicBrainzApi = MusicBrainzRetrofitClient.api
    private val coverArtApi = CoverArtArchiveRetrofitClient.api

    private val _data = MutableStateFlow<List<Ranking>>(emptyList())
    val data: StateFlow<List<Ranking>> = _data

    init {
        fetchAlbums()
    }

    private fun fetchAlbums() {
        viewModelScope.launch {
            try {
                val rankingsFromApi = api.fetchAlbums()
                val rankingsWithImages = rankingsFromApi.map { ranking ->
                    Ranking(
                        name = ranking.name,
                        name1 = ranking.name1,
                        reproductions = ranking.reproductions,
                        imageUrl = "https://via.placeholder.com/150" // Use placeholder image initially
                    )
                }
                _data.value = rankingsWithImages

                // Fetch album cover images for visible albums
                rankingsWithImages.forEach { ranking ->
                    viewModelScope.launch {
                        try {
                            val imageUrl = getAlbumCoverUrl(ranking.name)
                            val updatedRanking = ranking.copy(imageUrl = imageUrl)
                            _data.emit(_data.value.map { if (it.name == ranking.name) updatedRanking else it })
                        } catch (e: Exception) {
                            // Log the exception
                            Log.e("MainViewModel", "Error fetching album cover for ${ranking.name}", e)
                        }
                    }
                }
            } catch (e: Exception) {
                // Log the exception
                Log.e("MainViewModel", "Error fetching albums", e)
                // Handle exceptions
                _data.value = listOf(Ranking("Error", "Error", 0, "https://via.placeholder.com/150"))
            }
        }
    }

    private suspend fun getAlbumCoverUrl(album: String): String {
        return withContext(Dispatchers.IO) {
            try {
                val query = "release:\"$album\""
                val searchResponse = musicBrainzApi.searchRelease(query = query)
                Log.d("MainViewModel", "Search response for $album: $searchResponse")

                val release = searchResponse.releases.firstOrNull()
                if (release != null) {
                    val releaseId = release.id
                    try {
                        // Verify if the cover art exists
                        val coverArtResponse = coverArtApi.getCoverArt(releaseId)
                        if (coverArtResponse.images.isNotEmpty()) {
                            Log.d("MainViewModel", "Cover art found for release ID: $releaseId")
                            return@withContext "https://coverartarchive.org/release/$releaseId/front-250.jpg"
                        } else {
                            Log.e("MainViewModel", "No cover art found for release ID: $releaseId")
                        }
                    } catch (e: retrofit2.HttpException) {
                        if (e.code() == 404) {
                            Log.e("MainViewModel", "Cover art not found (404) for release ID: $releaseId")
                        } else {
                            Log.e("MainViewModel", "HTTP error fetching cover art for release ID: $releaseId", e)
                        }
                    } catch (e: Exception) {
                        Log.e("MainViewModel", "Error fetching cover art for release ID: $releaseId", e)
                    }
                } else {
                    Log.e("MainViewModel", "No release found for album: $album")
                }
                "https://via.placeholder.com/150"
            } catch (e: Exception) {
                Log.e("MainViewModel", "Error fetching album cover URL for $album", e)
                "https://via.placeholder.com/150"
            }
        }
    }
}